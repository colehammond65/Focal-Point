<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= settings.siteTitle || "Focal Point" %> - Site Settings
    </title>
    <% if (settings.favicon) { %>
        <link rel="icon" type="image/png" href="/uploads/<%= settings.favicon %>">
        <% } %>
            <link rel="stylesheet" href="/styles.css?v=<%= encodeURIComponent(settings.accentColor || '') %>">
            <style>
                :root {
                    --primary-color: <%=settings.accentColor || '#2ecc71' %>;
                    --primary-hover: <%=settings.accentColor ? (settings.accentColor.replace('#', '%23') + 'cc'): '#27ae60' %>;
                }
            </style>
</head>

<body>
    <%- include('partials/header', { showAdminNav: true, settings, loggedIn: true }) %>
        <div class="container">
            <h1>Site Settings</h1>
            <div class="settings-flex-row">
                <!-- Branding Section -->
                <section class="admin-card">
                    <h2>Branding</h2>
                    <form action="/admin/settings" method="POST" enctype="multipart/form-data" class="admin-form">
                        <label for="siteTitle">Site Name (Browser tab):</label>
                        <input type="text" id="siteTitle" name="siteTitle" value="<%= settings.siteTitle %>" required>

                        <label for="accentColor">Accent Colour (HEX):</label>
                        <div style="display:flex;align-items:center;gap:0.5em;">
                            <input type="color" id="accentColorPicker" value="<%= settings.accentColor || '#2ecc71' %>"
                                style="width:40px;height:32px;padding:0;border:none;background:none;">
                            <input type="text" id="accentColor" name="accentColor"
                                value="<%= settings.accentColor || '#2ecc71' %>" pattern="#?[A-Fa-f0-9]{6,7}"
                                maxlength="7" style="width:100px" required>
                        </div>
                        <small>Used for buttons and highlights. Example: #2ecc71</small>
                        <div class="accent-color-reminder">
                            <strong>Reminder:</strong> Pick a colour that is readable on both <span
                                style="background:#fff;color:#222;padding:0 2px;border-radius:2px;">light</span> and
                            <span style="background:#222;color:#fff;padding:0 2px;border-radius:2px;">dark</span> mode
                            backgrounds.
                        </div>

                        <script>
                            document.addEventListener('DOMContentLoaded', function () {
                                const colorInput = document.getElementById('accentColor');
                                const colorPicker = document.getElementById('accentColorPicker');
                                function normalizeHex(v) {
                                    v = v.trim();
                                    if (!v.startsWith('#')) v = '#' + v;
                                    if (/^#[A-Fa-f0-9]{6}$/.test(v)) return v;
                                    // Try to fix 3-digit hex
                                    if (/^#[A-Fa-f0-9]{3}$/.test(v)) {
                                        v = '#' + v.slice(1).split('').map(x => x + x).join('');
                                        return v;
                                    }
                                    return '';
                                }
                                function syncFromPicker() {
                                    if (colorPicker && colorInput) {
                                        colorInput.value = colorPicker.value;
                                    }
                                }
                                function syncFromInput() {
                                    if (colorInput && colorPicker) {
                                        let v = normalizeHex(colorInput.value);
                                        if (v) colorPicker.value = v;
                                    }
                                }
                                if (colorInput && colorPicker) {
                                    colorPicker.addEventListener('input', syncFromPicker);
                                    colorPicker.addEventListener('change', syncFromPicker);
                                    colorInput.addEventListener('input', syncFromInput);
                                    colorInput.addEventListener('change', syncFromInput);
                                    // Initial sync
                                    syncFromInput();
                                }
                            });
                        </script>

                        <% const headerType=(settings.headerType || 'text' ).trim().toLowerCase(); %>
                            <label for="headerTypeSwitch" class="switch-label">Header Type:</label>
                            <div class="switch-toggle-group">
                                <span class="switch-label-text">Text</span>
                                <label class="switch">
                                    <input type="checkbox" id="headerTypeSwitch" name="headerType" value="image"
                                        <%=headerType==='image' ? 'checked' : '' %>>
                                    <span class="slider"></span>
                                </label>
                                <span class="switch-label-text">Image</span>
                            </div>
                            <input type="hidden" id="headerTypeHidden" name="headerTypeHidden"
                                value="<%= headerType %>">

                            <script>
                                document.addEventListener('DOMContentLoaded', function () {
                                    var switchInput = document.getElementById('headerTypeSwitch');
                                    var hiddenInput = document.getElementById('headerTypeHidden');
                                    var textInput = document.getElementById('headerTextInput');
                                    var imageInput = document.getElementById('headerImageInput');
                                    function updateHeaderTypeUI() {
                                        var isImage = switchInput.checked;
                                        hiddenInput.value = isImage ? 'image' : 'text';
                                        if (textInput && imageInput) {
                                            textInput.classList.toggle('hidden', isImage);
                                            imageInput.classList.toggle('hidden', !isImage);
                                        }
                                    }
                                    switchInput.addEventListener('change', updateHeaderTypeUI);
                                    // Initial sync
                                    updateHeaderTypeUI();
                                });
                            </script>

                            <div id="headerTextInput" class="<%= headerType === 'image' ? 'hidden' : '' %>">
                                <label for="headerTitle" class="label-bottom-gap">Header Title:</label>
                                <input type="text" id="headerTitle" name="headerTitle"
                                    value="<%= settings.headerTitle %>">
                            </div>

                            <div id="headerImageInput" class="<%= headerType === 'image' ? '' : 'hidden' %>">
                                <div id="headerImageDropzone" class="dropzone dropzone-flex" tabindex="0">
                                    <span id="headerImageDropzoneText">Drag & drop header image here or click to
                                        select</span>
                                    <input type="file" id="headerImage" name="headerImage" accept="image/*"
                                        style="display:none;">
                                    <span id="headerImageFileName" class="file-name-label"></span>
                                </div>
                                <% if (settings.headerImage) { %>
                                    <div class="header-image-preview-container">
                                        <img src="/uploads/<%= settings.headerImage %>" alt="Header Image"
                                            class="header-image-preview">
                                    </div>
                                    <% } %>
                                        <img id="headerImagePreviewDynamic" alt="Header Image Preview"
                                            style="display:none;max-width:120px;max-height:60px;margin-top:0.5em;" />
                            </div>

                            <label for="favicon">Favicon (image, optional):</label>
                            <div id="faviconDropzone" class="dropzone dropzone-flex" tabindex="0">
                                <span id="faviconDropzoneText">Drag & drop favicon here or click to select</span>
                                <input type="file" id="favicon" name="favicon" accept="image/*" style="display:none;">
                                <span id="faviconFileName" class="file-name-label"></span>
                            </div>
                            <% if (settings.favicon) { %>
                                <div class="favicon-preview-container">
                                    <span class="favicon-preview-label">Preview</span>
                                    <img src="/uploads/<%= settings.favicon %>" alt="Current favicon"
                                        class="favicon-preview">
                                </div>
                                <% } %>
                                    <img id="faviconPreviewDynamic" alt="Favicon Preview"
                                        style="display:none;max-width:32px;max-height:32px;margin-top:0.5em;" />
                                    <button type="submit" class="btn btn-primary">Save Settings</button>
                    </form>
                    <% if (settings.headerImage) { %>
                        <form action="/admin/settings/remove-header-image" method="POST" class="form-margin-top">
                            <button type="submit" class="btn btn-danger">Remove Header Image</button>
                        </form>
                        <% } %>
                </section>
                <!-- Backup & Restore Section -->
                <section class="admin-card">
                    <h2>Backup & Restore</h2>
                    <form action="/admin/backup" method="POST" class="form-margin-bottom">
                        <button type="submit" class="btn btn-secondary">Take Backup</button>
                    </form>
                    <form action="/admin/restore" method="POST" enctype="multipart/form-data"
                        onsubmit="return confirm('This will overwrite your current database and images. Continue?');"
                        id="restoreForm">
                        <div id="restoreDropzone" class="dropzone" tabindex="0">
                            <span id="restoreDropzoneText">Drag & drop backup ZIP here or click to select</span>
                            <input type="file" name="backup" id="restoreFileInput" accept=".zip" required
                                style="display:none;">
                            <span id="restoreFileName" class="file-name-label"></span>
                        </div>
                        <button type="submit" id="restoreBtn" class="btn btn-primary" disabled>Upload Backup</button>
                    </form>
                    <p class="backup-note">Backups are ZIP files containing your database and all images.</p>
                    <% if (serverBackups.length) { %>
                        <h3>Server Backups</h3>
                        <form id="backup-bulk-form" method="POST" action="/admin/backup/bulk-action"
                            style="margin-bottom:1rem;">
                            <button type="button" name="action" value="download" id="download-selected-btn"
                                class="btn btn-secondary" disabled>
                                Download Selected
                            </button>
                            <button type="submit" name="action" value="delete" id="delete-selected-btn"
                                class="btn btn-danger ml-05" disabled
                                onclick="return confirm('Delete all selected backups?');">Delete Selected</button>
                            <button type="button" id="restore-selected-btn" class="btn btn-primary ml-05" disabled>
                                Restore Selected
                            </button>
                        </form>
                        <div class="admin-list">
                            <% serverBackups.forEach((b, idx)=> { %>
                                <label class="admin-list-item backup-select-item" for="backup-checkbox-<%= idx %>"
                                    style="cursor:pointer;">
                                    <input type="checkbox" class="backup-checkbox visually-hidden" name="filenames[]"
                                        value="<%= b.name %>" form="backup-bulk-form" id="backup-checkbox-<%= idx %>">
                                    <div class="backup-info">
                                        <span class="backup-filename">
                                            <%= b.name %>
                                        </span>
                                        <span class="backup-meta" data-backup-date="<%= b.mtime.toISOString() %>">
                                            <%= (b.size/1024/1024).toFixed(2) %> MB
                                        </span>
                                    </div>
                                </label>
                                <% }) %>
                        </div>
                        <p class="backup-note">
                            Server backup storage limit: <%= (backupLimit/1024/1024).toFixed(0) %> MB.<br>
                                Current usage: <%= (serverBackups.reduce((a,b)=> a+b.size,0)/1024/1024).toFixed(2) %>
                                    MB.
                        </p>
                        <% } %>
                </section>
            </div>
            <div id="toast-container" class="toast-container"></div>
        </div>
        <%- include('partials/dark-mode-toggle') %>
            <!-- Scripts for dropzones, previews, and bulk actions -->
            <script>
                // DRY dropzone setup function
                function setupDropzone(dropzone, input, fileNameSpan, onFiles) {
                    if (!dropzone || !input) return;
                    dropzone.addEventListener('click', () => input.click());
                    dropzone.addEventListener('keydown', e => {
                        if (e.key === 'Enter' || e.key === ' ') {
                            e.preventDefault();
                            input.click();
                        }
                    });
                    dropzone.addEventListener('dragover', e => {
                        e.preventDefault();
                        e.stopPropagation();
                        dropzone.classList.add('dragover');
                    });
                    dropzone.addEventListener('dragleave', e => {
                        e.preventDefault();
                        e.stopPropagation();
                        dropzone.classList.remove('dragover');
                    });
                    dropzone.addEventListener('drop', e => {
                        e.preventDefault();
                        e.stopPropagation();
                        dropzone.classList.remove('dragover');
                        if (e.dataTransfer.files.length) {
                            input.files = e.dataTransfer.files;
                            if (onFiles) onFiles(e.dataTransfer.files);
                            if (fileNameSpan) fileNameSpan.textContent = e.dataTransfer.files[0].name;
                        }
                    });
                    input.addEventListener('change', function () {
                        if (onFiles) onFiles(this.files);
                        if (fileNameSpan) fileNameSpan.textContent = this.files.length ? this.files[0].name : '';
                    });
                }

                // Restore backup dropzone
                setupDropzone(
                    document.getElementById('restoreDropzone'),
                    document.getElementById('restoreFileInput'),
                    document.getElementById('restoreFileName'),
                    function (files) {
                        const btn = document.getElementById('restoreBtn');
                        if (btn) btn.disabled = !files.length;
                    }
                );

                // Favicon dropzone
                setupDropzone(
                    document.getElementById('faviconDropzone'),
                    document.getElementById('favicon'),
                    document.getElementById('faviconFileName')
                );

                // Header image dropzone
                setupDropzone(
                    document.getElementById('headerImageDropzone'),
                    document.getElementById('headerImage'),
                    document.getElementById('headerImageFileName')
                );
            </script>
            <script>
                function updateHeaderInputVisibility() {
                    const checked = document.querySelector('input[name="headerType"]:checked');
                    if (!checked) return;
                    document.getElementById('headerTextInput').classList.toggle('hidden', checked.value !== 'text');
                    document.getElementById('headerImageInput').classList.toggle('hidden', checked.value !== 'image');
                }
                document.querySelectorAll('input[name="headerType"]').forEach(radio => {
                    radio.addEventListener('change', updateHeaderInputVisibility);
                });
                window.addEventListener('DOMContentLoaded', updateHeaderInputVisibility);
            </script>
            <script>
                document.querySelectorAll('.backup-checkbox').forEach(cb => {
                    cb.addEventListener('change', updateBulkButtons);
                });
                function updateBulkButtons() {
                    const checked = document.querySelectorAll('.backup-checkbox:checked').length;
                    document.getElementById('download-selected-btn').disabled = checked === 0;
                    document.getElementById('delete-selected-btn').disabled = checked === 0;
                    document.getElementById('restore-selected-btn').disabled = checked !== 1;
                }
                updateBulkButtons();
            </script>
            <script>
                document.getElementById('download-selected-btn').addEventListener('click', function () {
                    const checked = document.querySelectorAll('.backup-checkbox:checked');
                    if (!checked.length) return;
                    checked.forEach(cb => {
                        const filename = encodeURIComponent(cb.value);
                        const url = `/admin/backup/download/${filename}`;
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = cb.value;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                    });
                });
            </script>
            <script>
                document.getElementById('restore-selected-btn').addEventListener('click', function () {
                    const checked = document.querySelectorAll('.backup-checkbox:checked');
                    if (checked.length !== 1) return;
                    const filename = checked[0].value;
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/admin/restore-selected';
                    form.style.display = 'none';
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'filename'; // <-- FIXED: was 'backup', now 'filename'
                    input.value = filename;
                    form.appendChild(input);
                    document.body.appendChild(form);
                    form.submit();
                });
            </script>
            <script>
                function showToast(msg, timeout = 3500) {
                    const container = document.getElementById('toast-container');
                    if (!container) return;
                    const toast = document.createElement('div');
                    toast.className = 'toast';
                    toast.textContent = msg;
                    container.appendChild(toast);
                    setTimeout(() => {
                        toast.style.animation = 'toast-out 0.4s forwards';
                        setTimeout(() => toast.remove(), 400);
                    }, timeout);
                }
                (function () {
                    const params = new URLSearchParams(window.location.search);
                    const msg = params.get('msg');
                    if (msg) {
                        showToast(msg);
                        if (window.history.replaceState) {
                            params.delete('msg');
                            const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
                            window.history.replaceState({}, document.title, newUrl);
                        }
                    }
                })();
            </script>
            <script>
                window.addEventListener('DOMContentLoaded', function () {
                    var restoreInput = document.getElementById('restoreFileInput');
                    var restoreBtn = document.getElementById('restoreBtn');
                    var restoreFileName = document.getElementById('restoreFileName');
                    if (restoreInput && restoreBtn) {
                        restoreBtn.disabled = !restoreInput.files.length;
                        if (restoreFileName && !restoreInput.files.length) {
                            restoreFileName.textContent = '';
                        }
                    }
                });
            </script>
            <script>
                window.addEventListener('DOMContentLoaded', function () {
                    var restoreInput = document.getElementById('restoreFileInput');
                    var restoreBtn = document.getElementById('restoreBtn');
                    var restoreFileName = document.getElementById('restoreFileName');
                    if (restoreBtn) restoreBtn.disabled = true;
                    if (restoreFileName) restoreFileName.textContent = '';
                    if (restoreInput) {
                        restoreInput.value = "";
                    }
                });
            </script>
            <script>
                (function () {
                    // Favicon preview
                    const faviconInput = document.getElementById('favicon');
                    const faviconPreview = document.getElementById('faviconPreviewDynamic');
                    if (faviconInput && faviconPreview) {
                        faviconInput.addEventListener('change', function () {
                            if (this.files && this.files[0]) {
                                const reader = new FileReader();
                                reader.onload = function (e) {
                                    faviconPreview.src = e.target.result;
                                    faviconPreview.style.display = 'inline-block';
                                };
                                reader.readAsDataURL(this.files[0]);
                            }
                        });
                    }
                    // Header image preview
                    const headerInput = document.getElementById('headerImage');
                    const headerPreview = document.getElementById('headerImagePreviewDynamic');
                    if (headerInput && headerPreview) {
                        headerInput.addEventListener('change', function () {
                            if (this.files && this.files[0]) {
                                const reader = new FileReader();
                                reader.onload = function (e) {
                                    headerPreview.src = e.target.result;
                                    headerPreview.style.display = 'block';
                                };
                                reader.readAsDataURL(this.files[0]);
                            }
                        });
                    }
                })();
            </script>
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    document.querySelectorAll('.backup-meta[data-backup-date]').forEach(function (span) {
                        const iso = span.getAttribute('data-backup-date');
                        if (iso) {
                            const date = new Date(iso);
                            const formatted = date.toLocaleString();
                            span.innerHTML = `${formatted} &mdash; ${span.innerHTML.replace(/^[^&]+&mdash;\s*/, '')}`;
                        }
                    });
                });
            </script>
</body>

</html>