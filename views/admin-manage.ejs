<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= settings.siteTitle || "Anne's Photography" %>
    </title>
    <% if (settings.favicon) { %>
        <link rel="icon" type="image/png" href="/uploads/<%= settings.favicon %>">
        <% } %>
            <link rel="stylesheet" href="/styles.css">
</head>

<body>
    <%- include('partials/header', { showAdminNav: true }) %>
        <div class="container">
            <h1>Image & Category Management</h1>
            <% if (typeof req !=='undefined' && req.query && req.query.msg) { %>
                <div class="admin-msg" aria-live="polite">
                    <%= req.query.msg %>
                </div>
                <% } %>
                    <div class="admin-flex-row">
                        <!-- Upload Images Form -->
                        <section class="admin-card">
                            <h2>Upload Images</h2>
                            <form action="/upload" method="POST" enctype="multipart/form-data" class="admin-form">
                                <label for="image">Choose image(s):</label>
                                <div id="dropzone" class="dropzone">Drag & drop images here or click to select</div>
                                <input type="file" name="images" id="image" multiple required style="display:none;">
                                <div id="preview" class="preview"></div>
                                <% if (categories.length> 0) { %>
                                    <label for="category">Select a category:</label>
                                    <select name="category" id="category" required>
                                        <% categories.forEach(cat=> { %>
                                            <option value="<%= cat.name %>">
                                                <%= cat.name.replace(/-/g, ' ' ).replace(/\b\w/g, c=> c.toUpperCase())
                                                    %>
                                            </option>
                                            <% }); %>
                                    </select>
                                    <% } else { %>
                                        <p class="admin-error">
                                            No categories found. Please create a category first using the form on the
                                            right.
                                        </p>
                                        <% } %>
                                            <button type="submit" <%=categories.length===0 ? 'disabled' : ''
                                                %>>Upload</button>
                            </form>
                        </section>

                        <!-- Create Category Form -->
                        <section class="admin-card">
                            <h2>Create Category</h2>
                            <form action="/create-category" method="POST" class="admin-form"
                                style="flex-direction:row;gap:0.5rem;">
                                <label for="newCategory" class="visually-hidden">New Category Name</label>
                                <input type="text" id="newCategory" name="newCategory" placeholder="New category name"
                                    required style="flex:1;">
                                <button type="submit">Create</button>
                            </form>
                        </section>
                    </div>

                    <!-- Categories Section -->
                    <section class="admin-card">
                        <h2>Categories</h2>
                        <% if (categories.length> 0) { %>
                            <div id="category-list">
                                <% categories.forEach(cat=> { %>
                                    <section class="admin-card category-accordion" data-cat="<%= cat.name %>">
                                        <div class="category-toggle" tabindex="0" draggable="true" aria-expanded="false"
                                            aria-controls="cat-<%= cat.name %>-panel"
                                            onclick="toggleCategoryPanel('<%= cat.name %>')">
                                            <span class="category-title">
                                                <%= cat.name.replace(/-/g, ' ' ).replace(/\b\w/g, c=> c.toUpperCase())
                                                    %>
                                            </span>
                                            <span class="accordion-arrow" aria-hidden="true">&#9654;</span>
                                        </div>
                                        <div class="category-panel" id="cat-<%= cat.name %>-panel"
                                            style="display: none;">
                                            <div class="category-grid">
                                                <div class="category-card">
                                                    <div class="options-row">
                                                        <div class="category-options-box">
                                                            <div class="category-options-title">Category Options</div>
                                                            <form action="/delete-category" method="POST"
                                                                style="margin:0;">
                                                                <input type="hidden" name="category"
                                                                    value="<%= cat.name %>">
                                                                <button type="submit" class="delete-cat-btn"
                                                                    aria-label="Delete category"
                                                                    onclick="return confirm('Delete this category and all its images?');">Delete</button>
                                                            </form>
                                                        </div>
                                                        <div class="image-options-box">
                                                            <div class="image-options-title">Image Options</div>
                                                            <form class="bulk-delete-form"
                                                                onsubmit="return handleBulkDelete(event, '<%= cat.name %>')">
                                                                <button type="submit" id="bulkDeleteBtn-<%= cat.name %>"
                                                                    class="admin-action-btn" disabled>Delete
                                                                    Selected</button>
                                                                <button type="button" id="setThumbBtn-<%= cat.name %>"
                                                                    class="admin-action-btn set-thumb-btn" disabled
                                                                    onclick="handleSetThumbnail('<%= cat.name %>')">
                                                                    Set as Thumbnail
                                                                </button>
                                                            </form>
                                                        </div>
                                                    </div>
                                                    <div class="image-grid" data-cat="<%= cat.name %>">
                                                        <% (cat.images || []).forEach((img, i)=> { %>
                                                            <div class="img-item" draggable="true"
                                                                data-filename="<%= img.filename %>">
                                                                <input type="checkbox" class="bulk-delete-checkbox"
                                                                    name="selectedImages" value="<%= img.filename %>"
                                                                    aria-label="Select image for bulk actions">
                                                                <img src="/images/<%= cat.name %>/<%= img.filename %>"
                                                                    alt="<%= img.alt_text %>">
                                                                <input type="text" class="alt-text-input"
                                                                    value="<%= img.alt_text %>" placeholder="Alt text"
                                                                    data-image-id="<%= img.id %>"
                                                                    style="margin-left:0.5rem;"
                                                                    aria-label="Edit alt text">
                                                            </div>
                                                            <% }); %>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </section>
                                    <% }) %>
                            </div>
                            <% } else { %>
                                <p>No categories found.</p>
                                <% } %>
                    </section>
                    <!-- You can copy over the rest of your modals, scripts, and saving indicator from your previous admin.ejs here -->
        </div>
        <script>
            // Category drag-and-drop
            const catList = document.getElementById('category-list');
            let draggedSection = null;

            if (catList) {
                catList.querySelectorAll('.category-toggle').forEach(btn => {
                    btn.addEventListener('dragstart', function (e) {
                        draggedSection = btn.closest('.category-accordion');
                        draggedSection.classList.add('dragging');
                        e.dataTransfer.effectAllowed = 'move';
                        e.dataTransfer.setData('text/plain', btn.parentElement.dataset.cat); // for Firefox
                    });
                    btn.addEventListener('dragend', function (e) {
                        if (draggedSection) draggedSection.classList.remove('dragging');
                        draggedSection = null;
                    });
                });

                catList.querySelectorAll('.category-accordion').forEach(section => {
                    section.addEventListener('dragover', function (e) {
                        e.preventDefault();
                        if (draggedSection && draggedSection !== section) {
                            const rect = section.getBoundingClientRect();
                            const after = (e.clientY - rect.top) > (rect.height / 2);
                            catList.insertBefore(draggedSection, after ? section.nextSibling : section);
                        }
                    });
                });

                catList.addEventListener('drop', function (e) {
                    e.preventDefault();
                    // Save new order
                    const order = Array.from(catList.querySelectorAll('.category-accordion')).map(sec => sec.dataset.cat);
                    document.getElementById('saving-indicator').style.display = 'block';
                    fetch('/reorder-categories', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ order })
                    }).then(() => {
                        // Fade out saving indicator
                        const savingIndicator = document.getElementById('saving-indicator');
                        savingIndicator.classList.add('fade-out');
                        setTimeout(() => {
                            savingIndicator.style.display = 'none';
                            savingIndicator.classList.remove('fade-out');
                        }, 500);
                    });
                });
            }

            // Toggle category panel
            function toggleCategoryPanel(catName) {
                const panel = document.getElementById('cat-' + catName + '-panel');
                const toggle = document.querySelector('.category-toggle[aria-controls="cat-' + catName + '-panel"]');
                if (!panel || !toggle) return;
                const isOpen = panel.style.display === 'block';
                panel.style.display = isOpen ? 'none' : 'block';
                toggle.setAttribute('aria-expanded', !isOpen);
                // Optionally rotate arrow
                const arrow = toggle.querySelector('.accordion-arrow');
                if (arrow) {
                    arrow.style.transform = isOpen ? '' : 'rotate(90deg)';
                }
            }

            // Dropzone and preview for upload
            document.addEventListener('DOMContentLoaded', function () {
                const dropzone = document.getElementById('dropzone');
                const fileInput = document.getElementById('image');
                const preview = document.getElementById('preview');
                if (dropzone && fileInput) {
                    dropzone.addEventListener('click', function () {
                        fileInput.click();
                    });
                    dropzone.addEventListener('dragover', function (e) {
                        e.preventDefault();
                        dropzone.classList.add('dragover');
                    });
                    dropzone.addEventListener('dragleave', function (e) {
                        e.preventDefault();
                        dropzone.classList.remove('dragover');
                    });
                    dropzone.addEventListener('drop', function (e) {
                        e.preventDefault();
                        dropzone.classList.remove('dragover');
                        if (e.dataTransfer.files && e.dataTransfer.files.length) {
                            fileInput.files = e.dataTransfer.files;
                            fileInput.dispatchEvent(new Event('change'));
                        }
                    });
                }
                if (fileInput && preview) {
                    fileInput.addEventListener('change', function () {
                        preview.innerHTML = '';
                        Array.from(fileInput.files).forEach(file => {
                            if (file.type.startsWith('image/')) {
                                const reader = new FileReader();
                                reader.onload = function (e) {
                                    const img = document.createElement('img');
                                    img.src = e.target.result;
                                    img.style.maxWidth = '80px';
                                    img.style.maxHeight = '60px';
                                    img.style.margin = '0.3rem';
                                    img.style.border = '1px solid #ccc';
                                    img.style.borderRadius = '2px';
                                    preview.appendChild(img);
                                };
                                reader.readAsDataURL(file);
                            }
                        });
                    });
                }

                // Drag-and-drop for images within each category
                document.querySelectorAll('.image-grid').forEach(grid => {
                    let dragged = null;
                    grid.querySelectorAll('.img-item').forEach(item => {
                        item.addEventListener('dragstart', function (e) {
                            dragged = item;
                            item.classList.add('dragging');
                        });
                        item.addEventListener('dragend', function (e) {
                            item.classList.remove('dragging');
                            dragged = null;
                        });
                    });
                    grid.addEventListener('dragover', function (e) {
                        e.preventDefault();
                        const afterElement = Array.from(grid.querySelectorAll('.img-item')).find(child => {
                            const rect = child.getBoundingClientRect();
                            return e.clientY < rect.top + rect.height / 2;
                        });
                        if (dragged && afterElement && afterElement !== dragged) {
                            grid.insertBefore(dragged, afterElement);
                        } else if (dragged && !afterElement) {
                            grid.appendChild(dragged);
                        }
                    });
                    grid.addEventListener('drop', function (e) {
                        e.preventDefault();
                        // Save new order to server
                        const catName = grid.getAttribute('data-cat');
                        const order = Array.from(grid.querySelectorAll('.img-item')).map(item => item.getAttribute('data-filename'));
                        fetch('/reorder-images', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ category: catName, order })
                        }).then(res => {
                            if (res.ok) {
                                // Optionally show a saving indicator or reload
                            }
                        });
                    });
                });

                // Bulk delete and set thumbnail logic
                document.querySelectorAll('.bulk-delete-form').forEach(form => {
                    const catName = form.onsubmit ? form.onsubmit.toString().match(/'([^']+)'/)[1] : '';
                    const grid = form.closest('.category-card').querySelector('.image-grid');
                    const checkboxes = grid.querySelectorAll('.bulk-delete-checkbox');
                    const bulkDeleteBtn = form.querySelector('.admin-action-btn');
                    const setThumbBtn = form.querySelector('.set-thumb-btn');
                    checkboxes.forEach(cb => {
                        cb.addEventListener('change', function () {
                            const checked = grid.querySelectorAll('.bulk-delete-checkbox:checked');
                            bulkDeleteBtn.disabled = checked.length === 0;
                            setThumbBtn.disabled = checked.length !== 1;
                        });
                    });
                });

                // Handle bulk delete
                window.handleBulkDelete = function (event, catName) {
                    event.preventDefault();
                    const grid = document.querySelector(`.image-grid[data-cat="${catName}"]`);
                    const checked = Array.from(grid.querySelectorAll('.bulk-delete-checkbox:checked'));
                    if (!checked.length) return false;
                    if (!confirm('Delete selected images?')) return false;
                    const filenames = checked.map(cb => cb.value);
                    fetch('/bulk-delete-images', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ category: catName, filenames })
                    }).then(res => {
                        if (res.ok) location.reload();
                    });
                    return false;
                };

                // Handle set thumbnail
                window.handleSetThumbnail = function (catName) {
                    const grid = document.querySelector(`.image-grid[data-cat="${catName}"]`);
                    const checked = Array.from(grid.querySelectorAll('.bulk-delete-checkbox:checked'));
                    if (checked.length !== 1) return;
                    const filename = checked[0].value;
                    fetch('/set-thumbnail', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ category: catName, filename })
                    }).then(res => {
                        if (res.ok) location.reload();
                    });
                };

                // Alt text editing
                document.querySelectorAll('.alt-text-input').forEach(input => {
                    input.addEventListener('blur', function () {
                        const imageId = input.getAttribute('data-image-id');
                        const altText = input.value;
                        fetch('/update-alt-text', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ imageId, altText })
                        });
                    });
                    input.addEventListener('keydown', function (e) {
                        if (e.key === 'Enter') {
                            input.blur();
                            e.preventDefault();
                        }
                    });
                });
            });
        </script>
        <!-- Add the saving indicator if not already present -->
        <div id="saving-indicator"
            style="display:none;position:fixed;top:1.5rem;right:1.5rem;z-index:3000;background:#fffbe0;color:#222;padding:0.7rem 1.2rem;border:1px solid #e6b2b2;border-radius:0.3rem;font-weight:600;box-shadow:0 2px 8px rgba(0,0,0,0.07);">
            Saving...
        </div>
        <%- include('partials/dark-mode-toggle') %>
</body>

</html>