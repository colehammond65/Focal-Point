<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= settings.siteTitle || "Photo Gallery" %>
    </title>
    <% if (settings.favicon) { %>
        <link rel="icon" type="image/png" href="/uploads/<%= settings.favicon %>">
        <% } %>
            <link rel="stylesheet" href="/styles.css">
            <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js"></script>
</head>

<body>
    <%- include('partials/header', { showAdminNav: true }) %>
        <% if (typeof req !=='undefined' && req.query && req.query.msg) { %>
            <div class="admin-msg" aria-live="polite">
                <%= req.query.msg %>
            </div>
            <% } %>
                <div class="container">
                    <h1>Image & Category Management</h1>
                    <div class="admin-flex-row">
                        <!-- Upload Images Form -->
                        <section class="admin-card">
                            <h2>Upload Images</h2>
                            <form action="/upload" method="POST" enctype="multipart/form-data" class="admin-form">
                                <label for="image">Choose image(s):</label>
                                <div id="dropzone" class="dropzone">Drag & drop images here or click to select</div>
                                <input type="file" name="images" id="image" multiple required style="display:none;">
                                <div id="preview" class="preview"></div>
                                <% if (categories.length> 0) { %>
                                    <label for="category">Select a category:</label>
                                    <select name="category" id="category" required>
                                        <% categories.forEach(cat=> { %>
                                            <option value="<%= cat.name %>">
                                                <%= cat.name.replace(/-/g, ' ' ).replace(/\b\w/g, c=> c.toUpperCase())
                                                    %>
                                            </option>
                                            <% }); %>
                                    </select>
                                    <% } else { %>
                                        <p class="admin-error">
                                            No categories found. Please create a category first using the form on the
                                            right.
                                        </p>
                                        <% } %>
                                            <button type="submit" <%=categories.length===0 ? 'disabled' : ''
                                                %>>Upload</button>
                            </form>
                        </section>

                        <!-- Create Category Form -->
                        <section class="admin-card">
                            <h2>Create Category</h2>
                            <form action="/create-category" method="POST" class="admin-form row-gap">
                                <label for="newCategory" class="visually-hidden">New Category Name</label>
                                <input type="text" id="newCategory" name="newCategory" placeholder="New category name"
                                    required class="flex-1">
                                <button type="submit">Create</button>
                            </form>
                        </section>
                    </div>

                    <!-- Categories Section -->
                    <section class="admin-card admin-card-categories">
                        <h2>Categories</h2>
                        <% if (categories.length> 0) { %>
                            <div id="category-list">
                                <% categories.forEach(cat=> { %>
                                    <section class="admin-card category-accordion" data-cat="<%= cat.name %>">
                                        <div class="category-toggle" tabindex="0" draggable="true" aria-expanded="false"
                                            aria-controls="cat-<%= cat.name %>-panel"
                                            onclick="toggleCategoryPanel('<%= cat.name %>')">
                                            <span class="category-title">
                                                <%= cat.name.replace(/-/g, ' ' ).replace(/\b\w/g, c=> c.toUpperCase())
                                                    %>
                                            </span>
                                            <span class="accordion-arrow" aria-hidden="true">&#9654;</span>
                                        </div>
                                        <div class="category-panel hidden" id="cat-<%= cat.name %>-panel">
                                            <div class="category-grid">
                                                <div class="category-card">
                                                    <div class="options-row">
                                                        <div class="category-options-box">
                                                            <div class="category-options-title">Category Options</div>
                                                            <form action="/delete-category" method="POST"
                                                                class="no-margin">
                                                                <input type="hidden" name="category"
                                                                    value="<%= cat.name %>">
                                                                <button type="submit" class="delete-cat-btn"
                                                                    aria-label="Delete category"
                                                                    onclick="return confirm('Delete this category and all its images?');">Delete</button>
                                                            </form>
                                                            <form action="/rename-category" method="POST"
                                                                class="no-margin row-gap" style="margin-top:0.7rem;"
                                                                onsubmit="return confirm('Are you sure you want to rename this category?');">
                                                                <input type="hidden" name="oldName"
                                                                    value="<%= cat.name %>">
                                                                <input type="text" name="newName"
                                                                    placeholder="New category name" required
                                                                    minlength="2" maxlength="50" style="flex:1;">
                                                                <button type="submit">Rename</button>
                                                            </form>
                                                        </div>
                                                        <div class="image-options-box">
                                                            <div class="image-options-title">Image Options</div>
                                                            <form class="bulk-delete-form"
                                                                onsubmit="return handleBulkDelete(event, '<%= cat.name %>')">
                                                                <button type="submit" id="bulkDeleteBtn-<%= cat.name %>"
                                                                    class="admin-action-btn" disabled>Delete
                                                                    Selected</button>
                                                                <button type="button" id="setThumbBtn-<%= cat.name %>"
                                                                    class="admin-action-btn set-thumb-btn" disabled
                                                                    onclick="handleSetThumbnail('<%= cat.name %>')">
                                                                    Set as Thumbnail
                                                                </button>
                                                            </form>
                                                            <!-- Move Images Form (NEW) -->
                                                            <form class="move-images-form"
                                                                onsubmit="return handleMoveImages(event, '<%= cat.name %>')">
                                                                <select name="toCategory" required>
                                                                    <option value="" disabled selected>Move selected
                                                                        to...</option>
                                                                    <% categories.forEach(otherCat=> { if (otherCat.name
                                                                        !== cat.name) { %>
                                                                        <option value="<%= otherCat.name %>">
                                                                            <%= otherCat.name.replace(/-/g, ' ' ) %>
                                                                        </option>
                                                                        <% } }) %>
                                                                </select>
                                                                <button type="submit" class="admin-action-btn"
                                                                    id="moveImagesBtn-<%= cat.name %>"
                                                                    disabled>Move</button>
                                                            </form>
                                                        </div>
                                                    </div>
                                                    <div class="image-grid" data-cat="<%= cat.name %>">
                                                        <% (cat.images || []).forEach((img, i)=> { %>
                                                            <div class="img-item" draggable="true"
                                                                data-filename="<%= img.filename %>">
                                                                <input type="checkbox" class="bulk-delete-checkbox"
                                                                    name="selectedImages" value="<%= img.filename %>"
                                                                    aria-label="Select image for bulk actions">
                                                                <img src="/images/<%= cat.name %>/<%= img.filename %>"
                                                                    alt="<%= img.alt_text %>">
                                                                <input type="text" class="alt-text-input ml-05"
                                                                    value="<%= img.alt_text %>" placeholder="Alt text"
                                                                    data-image-id="<%= img.id %>"
                                                                    aria-label="Edit alt text">
                                                            </div>
                                                            <% }); %>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </section>
                                    <% }) %>
                            </div>
                            <% } else { %>
                                <p>No categories found.</p>
                                <% } %>
                    </section>
                </div>
                <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js"></script>
                <script>
                    // Enable/disable Move button based on selection
                    document.querySelectorAll('.image-options-box').forEach(box => {
                        const grid = box.closest('.category-card').querySelector('.image-grid');
                        const moveBtn = box.querySelector('.move-images-form button[type="submit"]');
                        if (!grid || !moveBtn) return;
                        grid.querySelectorAll('.bulk-delete-checkbox').forEach(cb => {
                            cb.addEventListener('change', function () {
                                const checked = grid.querySelectorAll('.bulk-delete-checkbox:checked');
                                moveBtn.disabled = checked.length === 0;
                            });
                        });
                    });

                    // Handle moving images
                    function handleMoveImages(event, fromCategory) {
                        event.preventDefault();
                        const form = event.target;
                        const toCategory = form.toCategory.value;
                        const grid = form.closest('.category-card').querySelector('.image-grid');
                        const checked = Array.from(grid.querySelectorAll('.bulk-delete-checkbox:checked'));
                        if (!checked.length) {
                            alert('Select at least one image to move.');
                            return false;
                        }
                        const filenames = checked.map(cb => cb.value);
                        fetch('/move-image', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ filenames, fromCategory, toCategory })
                        })
                            .then(res => res.json())
                            .then(data => {
                                if (data.success) {
                                    location.reload();
                                } else {
                                    alert(data.error || 'Failed to move images.');
                                }
                            });
                        return false;
                    }

                    // Handle bulk delete
                    function handleBulkDelete(event, category) {
                        event.preventDefault();
                        const grid = event.target.closest('.category-card').querySelector('.image-grid');
                        const checked = Array.from(grid.querySelectorAll('.bulk-delete-checkbox:checked'));
                        if (!checked.length) {
                            alert('Select at least one image to delete.');
                            return false;
                        }
                        if (!confirm('Are you sure you want to delete the selected images?')) return false;
                        const filenames = checked.map(cb => cb.value);
                        fetch('/bulk-delete-images', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ category, filenames })
                        })
                            .then(res => res.json())
                            .then(data => {
                                if (data.deleted) {
                                    deselectAllInGrid(grid);
                                    location.reload();
                                } else {
                                    alert('Failed to delete images.');
                                }
                            });
                        return false;
                    }

                    // Toggle category panel
                    function toggleCategoryPanel(catName) {
                        const panel = document.getElementById('cat-' + catName + '-panel');
                        const toggle = panel && panel.parentElement.querySelector('.category-toggle');
                        if (!panel) return;
                        const isOpen = !panel.classList.contains('hidden');
                        panel.classList.toggle('hidden', isOpen);
                        if (toggle) {
                            toggle.setAttribute('aria-expanded', !isOpen);
                            // Optionally rotate the arrow
                            const arrow = toggle.querySelector('.accordion-arrow');
                            if (arrow) arrow.style.transform = !isOpen ? 'rotate(90deg)' : '';
                        }
                    }

                    // DRY dropzone setup function (only for upload area)
                    function setupDropzone(dropzone, input, fileNameSpan, onFiles) {
                        if (!dropzone || !input) return;
                        dropzone.addEventListener('click', () => {
                            input.value = ""; // Always allow re-select
                            input.click();
                        });
                        dropzone.addEventListener('keydown', e => {
                            if (e.key === 'Enter' || e.key === ' ') {
                                e.preventDefault();
                                input.click();
                            }
                        });
                        dropzone.addEventListener('dragover', function (e) {
                            e.preventDefault();
                            e.stopPropagation();
                            dropzone.classList.add('dragover');
                        });
                        dropzone.addEventListener('dragleave', function (e) {
                            e.preventDefault();
                            e.stopPropagation();
                            dropzone.classList.remove('dragover');
                        });
                        dropzone.addEventListener('drop', function (e) {
                            e.preventDefault();
                            e.stopPropagation();
                            dropzone.classList.remove('dragover');
                            if (e.dataTransfer.files.length) {
                                input.files = e.dataTransfer.files;
                                if (onFiles) onFiles(e.dataTransfer.files);
                                if (fileNameSpan) fileNameSpan.textContent = e.dataTransfer.files[0].name;
                            }
                        });
                        input.addEventListener('change', function () {
                            if (onFiles) onFiles(this.files);
                            if (fileNameSpan) fileNameSpan.textContent = this.files.length ? this.files[0].name : '';
                        });
                    }

                    // Show image previews
                    function showPreviews(files) {
                        const preview = document.getElementById('preview');
                        if (!preview) return;
                        preview.innerHTML = '';
                        Array.from(files).forEach(file => {
                            if (!file.type.startsWith('image/')) return;
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                const img = document.createElement('img');
                                img.src = e.target.result;
                                img.style.maxWidth = '120px';
                                img.style.maxHeight = '120px';
                                img.style.margin = '0.5rem';
                                img.alt = file.name;
                                preview.appendChild(img);
                            };
                            reader.readAsDataURL(file);
                        });
                    }

                    // Use DRY dropzone for image upload (only for upload area)
                    setupDropzone(
                        document.getElementById('dropzone'),
                        document.getElementById('image'),
                        null,
                        showPreviews
                    );

                    // Deselect all checkboxes in a grid
                    function deselectAllInGrid(grid) {
                        grid.querySelectorAll('.bulk-delete-checkbox').forEach(cb => cb.checked = false);
                    }

                    // --- SortableJS for reordering categories and images ---
                    // Categories
                    new Sortable(document.getElementById('category-list'), {
                        animation: 150,
                        handle: '.category-toggle',
                        onEnd: function (evt) {
                            const order = Array.from(document.querySelectorAll('#category-list .category-accordion'))
                                .map(el => el.getAttribute('data-cat'));
                            fetch('/reorder-categories', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ order })
                            }).then(res => res.json()).then(data => {
                                if (!data.success) alert('Failed to save category order.');
                            });
                        }
                    });

                    // Images in each category
                    document.querySelectorAll('.image-grid').forEach(grid => {
                        new Sortable(grid, {
                            animation: 150,
                            draggable: '.img-item',
                            onEnd: function (evt) {
                                const cat = grid.getAttribute('data-cat');
                                const order = Array.from(grid.querySelectorAll('.img-item'))
                                    .map(el => el.getAttribute('data-filename'));
                                fetch('/reorder-images', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ category: cat, order: JSON.stringify(order) })
                                }).then(res => {
                                    if (!res.ok) alert('Failed to save image order.');
                                });
                            }
                        });
                    });
                </script>
                <script>
                    function showToast(msg, timeout = 3500) {
                        const container = document.getElementById('toast-container');
                        if (!container) return;
                        const toast = document.createElement('div');
                        toast.className = 'toast';
                        toast.textContent = msg;
                        container.appendChild(toast);
                        setTimeout(() => {
                            toast.style.animation = 'toast-out 0.4s forwards';
                            setTimeout(() => toast.remove(), 400);
                        }, timeout);
                    }

                    // Show toast if msg is present in query string
                    (function () {
                        const params = new URLSearchParams(window.location.search);
                        const msg = params.get('msg');
                        if (msg) {
                            showToast(msg);
                            // Remove msg from URL without reloading
                            if (window.history.replaceState) {
                                params.delete('msg');
                                const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
                                window.history.replaceState({}, document.title, newUrl);
                            }
                        }
                    })();
                </script>
                <div id="saving-indicator" class="saving-indicator">
                    Saving...
                </div>
                <%- include('partials/dark-mode-toggle') %>
</body>

</html>