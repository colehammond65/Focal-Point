<!-- views/admin.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Panel</title>
  <link rel="stylesheet" href="/styles.css">
  <style>
    .img-dropzone.dragging {
      min-height: 32px;
      pointer-events: auto;
    }
  </style>
</head>

<body>
  <%- include('partials/header', { showAdminNav: true }) %>
    <div class="container">
      <h1>Admin Panel</h1>

      <% if (typeof req !=='undefined' && req.query && req.query.msg) { %>
        <div class="admin-msg" aria-live="polite">
          <%= req.query.msg %>
        </div>
        <% } %>

          <div class="admin-flex-row">
            <!-- Upload Images Form -->
            <section class="admin-card">
              <h2>Upload Images</h2>
              <form action="/upload" method="POST" enctype="multipart/form-data" class="admin-form">
                <label for="image">Choose image(s):</label>
                <div id="dropzone" class="dropzone">Drag & drop images here or click to select</div>
                <input type="file" name="images" id="image" multiple required style="display:none;">
                <div id="preview" class="preview"></div>
                <% if (categories.length> 0) { %>
                  <label for="category">Select a category:</label>
                  <select name="category" id="category" required>
                    <% categories.forEach(cat=> { %>
                      <option value="<%= cat.name %>">
                        <%= cat.name.replace(/-/g, ' ' ).replace(/\b\w/g, c=> c.toUpperCase()) %>
                      </option>
                      <% }); %>
                  </select>
                  <% } else { %>
                    <p class="admin-error">
                      No categories found. Please create a category first using the form on the right.
                    </p>
                    <% } %>
                      <button type="submit" <%=categories.length===0 ? 'disabled' : '' %>>Upload</button>
              </form>
            </section>

            <!-- Create Category Form -->
            <section class="admin-card">
              <h2>Create Category</h2>
              <form action="/create-category" method="POST" class="admin-form" style="flex-direction:row;gap:0.5rem;">
                <label for="newCategory" class="visually-hidden">New Category Name</label>
                <input type="text" id="newCategory" name="newCategory" placeholder="New category name" required
                  style="flex:1;">
                <button type="submit">Create</button>
              </form>
            </section>
          </div>

          <!-- Category & Image Management -->
          <% if (categories.length> 0) { %>
            <% categories.forEach(cat=> { %>
              <% const images=cat.images; %>
                <section class="admin-card">
                  <h2>Manage Categories & Images</h2>
                  <div class="category-grid">
                    <div class="category-card">
                      <div class="category-header"
                        style="display: flex; align-items: center; justify-content: space-between;">
                        <span class="category-title">
                          <%= cat.name.replace(/-/g, ' ' ).replace(/\b\w/g, c=> c.toUpperCase()) %>
                        </span>
                        <form action="/delete-category" method="POST" style="margin:0;">
                          <input type="hidden" name="category" value="<%= cat.name %>">
                          <button type="submit" class="delete-cat-btn" aria-label="Delete category"
                            onclick="return confirm('Delete this category and all its images?');">Delete</button>
                        </form>
                      </div>
                      <form class="bulk-delete-form" onsubmit="return handleBulkDelete(event, '<%= cat.name %>')">
                        <button type="submit" id="bulkDeleteBtn-<%= cat.name %>" disabled>Delete Selected</button>
                        <button type="button" id="setThumbBtn-<%= cat.name %>" class="set-thumb-btn" disabled
                          onclick="handleSetThumbnail('<%= cat.name %>')" style="margin-left: 0.7rem;">
                          Set as Thumbnail
                        </button>
                      </form>
                      <div class="image-grid" data-cat="<%= cat.name %>">
                        <% images.forEach((img, i)=> { %>
                          <div class="img-dropzone" data-index="<%= i %>"></div>
                          <div class="img-item <%= cat.preview === img.filename ? 'is-thumb' : '' %>"
                            data-img="<%= img.filename %>">
                            <input type="checkbox" class="bulk-delete-checkbox"
                              onchange="toggleBulkDeleteBtn('<%= cat.name %>')">
                            <img src="/images/<%= cat.name %>/<%= img.filename %>" alt="<%= img.alt_text %>">
                            <input type="text" class="alt-text-input" value="<%= img.alt_text %>" placeholder="Alt text"
                              onchange="updateAltText('<%= img.id %>', this.value)">
                          </div>
                          <% }); %>
                            <div class="img-dropzone" data-index="<%= images.length %>"></div>
                      </div>
                    </div>
                  </div>
                </section>
                <% }) %>
                  <% } %>

                    <!-- Delete confirmation modal -->
                    <div id="deleteModal" class="modal" style="display:none;">
                      <div class="modal-content">
                        <p>Are you sure you want to delete this image?</p>
                        <button id="confirmDeleteBtn">Yes, Delete</button>
                        <button id="cancelDeleteBtn">Cancel</button>
                      </div>
                    </div>

                    <script>
                      // Image preview for uploads
                      document.getElementById('image').addEventListener('change', function (e) {
                        const preview = document.getElementById('preview');
                        preview.innerHTML = '';
                        Array.from(this.files).forEach(file => {
                          if (file.type.startsWith('image/')) {
                            const reader = new FileReader();
                            reader.onload = function (evt) {
                              const img = document.createElement('img');
                              img.src = evt.target.result;
                              img.style.width = '80px';
                              img.style.height = '60px';
                              img.style.objectFit = 'cover';
                              img.style.border = '1px solid #ccc';
                              img.style.borderRadius = '4px';
                              preview.appendChild(img);
                            };
                            reader.readAsDataURL(file);
                          }
                        });
                      });

                      // Drag-and-drop for file input
                      const dropzone = document.getElementById('dropzone');
                      const fileInput = document.getElementById('image');
                      dropzone.addEventListener('click', () => fileInput.click());
                      dropzone.addEventListener('dragover', e => {
                        e.preventDefault();
                        dropzone.style.background = '#f0f0f0';
                      });
                      dropzone.addEventListener('dragleave', e => {
                        e.preventDefault();
                        dropzone.style.background = '';
                      });
                      dropzone.addEventListener('drop', e => {
                        e.preventDefault();
                        dropzone.style.background = '';
                        fileInput.files = e.dataTransfer.files;
                        fileInput.dispatchEvent(new Event('change'));
                      });

                      // Drag-and-drop reordering for images with auto-save
                      document.querySelectorAll('.image-grid').forEach(grid => {
                        let draggedItems = [];
                        let dragging = false;

                        function setupDragAndDrop() {
                          // Remove all old dropzones
                          grid.querySelectorAll('.img-dropzone').forEach(z => z.remove());
                          // Insert dropzones before each img-item and at the end
                          const items = Array.from(grid.querySelectorAll('.img-item'));
                          items.forEach((item, i) => {
                            const dz = document.createElement('div');
                            dz.className = 'img-dropzone';
                            dz.dataset.index = i;
                            grid.insertBefore(dz, item);
                          });
                          // Add dropzone at the end
                          const dzEnd = document.createElement('div');
                          dzEnd.className = 'img-dropzone';
                          dzEnd.dataset.index = items.length;
                          grid.appendChild(dzEnd);

                          // Setup dropzone events
                          grid.querySelectorAll('.img-dropzone').forEach((zone, idx) => {
                            zone.addEventListener('dragover', function (e) {
                              e.preventDefault();
                              if (!dragging) return;
                              this.classList.add('active');
                            });
                            zone.addEventListener('dragleave', function () {
                              this.classList.remove('active');
                            });
                            zone.addEventListener('drop', function (e) {
                              e.preventDefault();
                              this.classList.remove('active');
                              if (!dragging) return;
                              // Remove dragged items from grid
                              draggedItems.forEach(item => grid.removeChild(item));
                              // Insert at the dropzone index
                              const imgItems = Array.from(grid.querySelectorAll('.img-item'));
                              let insertBefore = imgItems[idx] || null;
                              draggedItems.forEach(item => grid.insertBefore(item, insertBefore));
                              autoSaveOrder(grid.dataset.cat);
                              // Rebuild dropzones after reorder
                              setupDragAndDrop();
                              setupImageDrag();
                            });
                          });
                        }

                        function setupImageDrag() {
                          grid.querySelectorAll('.img-item').forEach(item => {
                            item.setAttribute('draggable', 'true');
                            // Only dragstart and dragend on .img-item
                            item.addEventListener('dragstart', function (e) {
                              const checked = grid.querySelectorAll('.bulk-delete-checkbox:checked');
                              if (checked.length > 0 && this.querySelector('.bulk-delete-checkbox').checked) {
                                draggedItems = Array.from(checked).map(cb => cb.closest('.img-item'));
                              } else {
                                draggedItems = [this];
                              }
                              dragging = true;
                              draggedItems.forEach(i => i.classList.add('dragging'));
                              grid.querySelectorAll('.img-dropzone').forEach(z => z.classList.add('dragging'));
                              e.dataTransfer.setData('text/plain', '');
                            });
                            item.addEventListener('dragend', function () {
                              dragging = false;
                              draggedItems.forEach(i => i.classList.remove('dragging'));
                              draggedItems = [];
                              grid.querySelectorAll('.img-dropzone').forEach(z => z.classList.remove('dragging'));
                            });
                            // REMOVE any dragover, drop, dragleave handlers from .img-item!
                          });
                        }

                        setupDragAndDrop();
                        setupImageDrag();
                      });

                      function autoSaveOrder(cat) {
                        const container = document.querySelector(`.image-grid[data-cat="${cat}"]`);
                        const order = Array.from(container.querySelectorAll('.img-item')).map(div => div.dataset.img);
                        fetch('/reorder-images', {
                          method: 'POST',
                          headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                          },
                          body: `category=${encodeURIComponent(cat)}&order=${encodeURIComponent(JSON.stringify(order))}`
                        })
                          .then(res => res.ok ? res.text() : Promise.reject())
                          .then(() => {
                            // Optionally show a quick "Order saved!" message
                            const msg = document.createElement('div');
                            msg.className = 'admin-msg';
                            msg.textContent = 'Order saved!';
                            document.body.appendChild(msg);
                            setTimeout(() => msg.remove(), 1200);
                          })
                          .catch(() => {
                            const msg = document.createElement('div');
                            msg.className = 'admin-msg';
                            msg.style.background = '#ffe0e0';
                            msg.style.borderColor = '#e6b2b2';
                            msg.textContent = 'Failed to save order!';
                            document.body.appendChild(msg);
                            setTimeout(() => msg.remove(), 2000);
                          });
                      }
                    </script>

                    <script>
                      let deleteCategory = '';
                      let deleteFilename = '';
                      let deleteImgItem = null;

                      function showDeleteConfirm(btn, category, filename) {
                        deleteCategory = category;
                        deleteFilename = filename;
                        deleteImgItem = btn.closest('.img-item');
                        document.getElementById('deleteModal').style.display = 'flex';
                      }

                      document.getElementById('cancelDeleteBtn').onclick = function () {
                        document.getElementById('deleteModal').style.display = 'none';
                        deleteCategory = '';
                        deleteFilename = '';
                        deleteImgItem = null;
                      };

                      document.getElementById('confirmDeleteBtn').onclick = async function () {
                        if (!deleteCategory || !deleteFilename) return;
                        const res = await fetch('/delete-image', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                          body: `category=${encodeURIComponent(deleteCategory)}&filename=${encodeURIComponent(deleteFilename)}`
                        });
                        if (res.ok) {
                          if (deleteImgItem) deleteImgItem.remove();
                        }
                        document.getElementById('deleteModal').style.display = 'none';
                        deleteCategory = '';
                        deleteFilename = '';
                        deleteImgItem = null;
                      };
                    </script>

                    <script>
                      function toggleBulkDeleteBtn(cat) {
                        const grid = document.querySelector(`.image-grid[data-cat="${cat}"]`);
                        const bulkBtn = document.getElementById(`bulkDeleteBtn-${cat}`);
                        const thumbBtn = document.getElementById(`setThumbBtn-${cat}`);
                        const checked = grid.querySelectorAll('.bulk-delete-checkbox:checked');
                        bulkBtn.disabled = checked.length === 0;
                        thumbBtn.disabled = checked.length !== 1;
                      }

                      async function handleBulkDelete(event, cat) {
                        event.preventDefault();
                        const grid = document.querySelector(`.image-grid[data-cat="${cat}"]`);
                        const checked = grid.querySelectorAll('.bulk-delete-checkbox:checked');
                        if (checked.length === 0) return false;
                        if (!confirm(`Delete ${checked.length} selected image(s)?`)) return false;

                        const filenames = Array.from(checked).map(cb => cb.closest('.img-item').dataset.img);
                        const res = await fetch('/bulk-delete-images', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ category: cat, filenames })
                        });
                        if (res.ok) {
                          filenames.forEach(filename => {
                            const item = grid.querySelector(`.img-item[data-img="${filename}"]`);
                            if (item) item.remove();
                          });
                          toggleBulkDeleteBtn(cat);
                        }
                        return false;
                      }

                      async function handleSetThumbnail(cat) {
                        const grid = document.querySelector(`.image-grid[data-cat="${cat}"]`);
                        const checked = grid.querySelectorAll('.bulk-delete-checkbox:checked');
                        if (checked.length !== 1) return;
                        const filename = checked[0].closest('.img-item').dataset.img;
                        const btn = document.getElementById(`setThumbBtn-${cat}`);
                        btn.disabled = true;
                        const res = await fetch('/set-thumbnail', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ category: cat, filename })
                        });
                        if (res.ok) {
                          // Update UI: visually indicate the new thumbnail
                          grid.querySelectorAll('.img-item').forEach(item => {
                            item.classList.remove('is-thumb');
                          });
                          checked[0].closest('.img-item').classList.add('is-thumb');
                          // Optionally show a quick confirmation
                          const msg = document.createElement('div');
                          msg.className = 'admin-msg';
                          msg.textContent = 'Thumbnail updated!';
                          document.body.appendChild(msg);
                          setTimeout(() => msg.remove(), 1200);
                        }
                      }
                    </script>

                    <script>
                      // Auto-hide admin confirmation messages after 5 seconds
                      document.addEventListener('DOMContentLoaded', function () {
                        const msg = document.querySelector('.admin-msg');
                        if (msg) {
                          setTimeout(() => {
                            msg.style.transition = 'opacity 0.5s';
                            msg.style.opacity = '0';
                            setTimeout(() => msg.remove(), 500);
                          }, 5000);
                        }
                      });
                    </script>

                    <script>
                      // Make clicking anywhere on .img-item toggle the checkbox (except if clicking the checkbox itself)
                      document.querySelectorAll('.image-grid').forEach(grid => {
                        grid.querySelectorAll('.img-item').forEach(item => {
                          item.addEventListener('click', function (e) {
                            // Prevent double toggling if the checkbox itself was clicked
                            if (e.target.classList.contains('bulk-delete-checkbox')) return;
                            const checkbox = this.querySelector('.bulk-delete-checkbox');
                            if (checkbox) {
                              checkbox.checked = !checkbox.checked;
                              // Trigger change event for enabling/disabling the bulk delete button
                              checkbox.dispatchEvent(new Event('change', { bubbles: true }));
                            }
                          });
                        });
                      });
                    </script>

                    <script>
                      function updateAltText(imageId, altText) {
                        fetch('/update-alt-text', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ imageId, altText })
                        });
                      }
                    </script>
    </div>
</body>

</html>