<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>
    <%= settings.siteTitle || "Photo Gallery" %>
  </title>
  <% if (settings.favicon) { %>
    <link rel="icon" type="image/png" href="/uploads/<%= settings.favicon %>">
    <% } %>
      <link rel="stylesheet" href="/styles.css">
</head>

<body>
  <%- include('partials/header', { showAdminNav: false }) %>
    <div class="container">
      <% var loggedIn=typeof loggedIn !=='undefined' ? loggedIn : false; %>

        <% if (images && images.length) { %>
          <!-- Gallery view for a category -->
          <a class="back" href="/">Back to Categories</a>
          <div class="gallery">
            <% images.forEach(img=> { %>
              <img src="/images/<%= category %>/<%= img.filename %>" alt="<%= img.alt_text %>" loading="lazy">
              <% }); %>
          </div>
          <% } else { %>
            <!-- Category grid on homepage -->
            <div class="categories">
              <% categories.forEach(cat=> { %>
                <a class="category" href="/gallery/<%= cat.name %>">
                  <div class="category-image-wrapper">
                    <% if (cat.preview) { %>
                      <img src="/images/<%= cat.name %>/<%= cat.preview %>" alt="<%= cat.preview %>">
                      <% } else { %>
                        <div class="no-image">No image</div>
                        <% } %>
                  </div>
                  <div class="category-name">
                    <%= cat.name.replace(/-/g, ' ' ).replace(/\b\w/g, c=> c.toUpperCase()) %>
                  </div>
                </a>
                <% }); %>
            </div>
            <% } %>

              <!-- Lightbox for viewing images -->
              <div id="lightbox" class="lightbox" role="dialog" aria-modal="true">
                <button class="close-btn" id="closeBtn" aria-label="Close">&times;</button>
                <div class="lightbox-inner">
                  <img id="lightboxImg" src="" alt="">
                  <div id="lightboxAlt" class="lightbox-alt"></div>
                </div>
              </div>

              <script>
                // Lightbox functionality for gallery images
                const images = document.querySelectorAll('.gallery img');
                const lightbox = document.getElementById('lightbox');
                const lightboxImg = document.getElementById('lightboxImg');
                const closeBtn = document.getElementById('closeBtn');

                images.forEach(img => {
                  img.addEventListener('click', (e) => {
                    e.preventDefault();
                    lightboxImg.src = img.src;
                    lightboxImg.alt = img.alt;
                    lightbox.style.display = 'flex';
                    document.body.classList.add('lightbox-open');
                    closeBtn.focus();
                    const altBox = document.getElementById('lightboxAlt');
                    if (img.alt && img.alt.trim() !== '') {
                      altBox.textContent = img.alt;
                      altBox.style.display = '';
                    } else {
                      altBox.textContent = '';
                      altBox.style.display = 'none';
                    }
                  });
                });

                function closeLightbox() {
                  lightbox.style.display = 'none';
                  lightboxImg.src = '';
                  document.body.classList.remove('lightbox-open');
                }

                closeBtn.addEventListener('click', closeLightbox);

                document.addEventListener('keydown', (e) => {
                  if (e.key === 'Escape') {
                    closeLightbox();
                  }
                });

                lightbox.addEventListener('click', (e) => {
                  if (e.target === lightbox) {
                    closeLightbox();
                  }
                });

                // Fade-in effect for lazy-loaded images
                document.querySelectorAll('.gallery img[loading="lazy"]').forEach(img => {
                  img.addEventListener('load', () => {
                    img.setAttribute('data-loaded', 'true');
                  });
                  // If already cached
                  if (img.complete) {
                    img.setAttribute('data-loaded', 'true');
                  }
                });

                // Balance category grid layout
                function balanceCategoryGrid() {
                  const grid = document.querySelector('.categories');
                  if (!grid) return;
                  const items = grid.children.length;
                  const containerWidth = grid.offsetWidth;
                  const minCardWidth = 220; // Minimum width for a card

                  // Responsive breakpoints
                  if (window.innerWidth <= 900) {
                    grid.style.display = 'grid';
                    grid.style.gridTemplateColumns = `repeat(1, minmax(${minCardWidth}px, 1fr))`;
                    grid.style.justifyContent = 'center';
                    return;
                  }
                  if (window.innerWidth <= 1250) {
                    grid.style.display = 'grid';
                    grid.style.gridTemplateColumns = `repeat(2, minmax(${minCardWidth}px, 1fr))`;
                    grid.style.justifyContent = 'center';
                    return;
                  }

                  // Desktop: balance columns, but enforce min width
                  const minDesktopCardWidth = 350;
                  let bestCols = 1;
                  let bestRows = items;
                  let bestImbalance = Infinity;

                  for (let cols = 1; cols <= items; cols++) {
                    const cardWidth = containerWidth / cols;
                    if (cardWidth < minDesktopCardWidth) continue;

                    const rows = Math.ceil(items / cols);
                    const lastRowItems = items % cols || cols;
                    if (lastRowItems < 2) continue;

                    const imbalance = Math.abs(cols - (items / rows));
                    if (
                      rows < bestRows ||
                      (rows === bestRows && imbalance < bestImbalance)
                    ) {
                      bestCols = cols;
                      bestRows = rows;
                      bestImbalance = imbalance;
                    }
                  }

                  grid.style.display = 'grid';
                  grid.style.gridTemplateColumns = `repeat(${bestCols}, minmax(${minCardWidth}px, 1fr))`;
                  grid.style.justifyContent = '';
                }
                window.addEventListener('resize', balanceCategoryGrid);
                window.addEventListener('DOMContentLoaded', balanceCategoryGrid);
              </script>
    </div>
    <%- include('partials/footer') %>
      <%- include('partials/dark-mode-toggle') %>
</body>

</html>